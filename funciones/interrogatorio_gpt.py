import streamlit as st
import openai

def interrogatorio_gpt(datos_paciente, openai_client, modelo):
    st.header("Interrogatorio MÃ©dico con GPT")

    # Cargar el prompt
    with open('gpt_config/prompt.txt', 'r') as file:
        prompt = file.read()

    # Contenedor para el chat
    chat_container = st.container()

    # Inicializar la conversaciÃ³n (SOLO si no existe)
    if "conversation" not in st.session_state:
        prompt_inicial = f"{prompt}\nDatos del paciente:\nEdad: {datos_paciente['edad']} aÃ±os\nPeso: {datos_paciente['peso']} kg\nAltura: {datos_paciente['altura']} cm\n\nHola, Â¿podrÃ­as contarme cuÃ¡les son tus sÃ­ntomas?" 
        st.session_state.conversation = [{"role": "system", "content": prompt_inicial}]

    # Manejar la conversaciÃ³n (esta parte siempre se ejecuta)
    with chat_container:
        for message in st.session_state.conversation:
            if message["role"] == "user":
                st.write("ğŸ‘¤ Usuario:", message["content"])
            else:
                st.write("ğŸ¤– GPT:", message["content"])

        user_input = st.text_area("TÃº:", key="user_input")
        if user_input:
            st.session_state.conversation.append({"role": "user", "content": user_input})

            response = openai_client.chat.completions.create(
                model=modelo,
                messages=st.session_state.conversation
            )
            message = response.choices[0].message.content
            st.session_state.conversation.append({"role": "assistant", "content": message})

            st.write("ğŸ¤– GPT:", message)

    return st.session_state.conversation
